AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a PiHole EC2 Security Resources in AWS

Parameters:
  EC2ServiceName:
    Description: The name of the EC2 service
    Type: String
    Default: pihole
  Ipv4HostNumber:
    Description: The host value of the public IPv4 address for the new instance
    Type: String
    Default: 100
  Ipv6HostNumber:
    Description: The host value of the public IPv6 address for the new instance
    Type: String
    Default: 10

Resources:
  # EC2 Instance
  PiHoleEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              source: s3://cloudformation-templates-shared-files/metadata/pihole/amazon-cloudwatch-agent.json
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets: [ 'example-bucket' ]
          roleName: PiHoleIAMRole
        }
      }
    Properties:
      AvailabilityZone:
        Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-AvailabilityZone'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            Iops: 3000
            VolumeSize: 16
            VolumeType: gp3
      IamInstanceProfile: !Ref PiHoleIAMInstanceProfile
      ImageId: ami-0f2967bce46537146 # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      InstanceType: t2.micro #1 vCPU, 1G Mem, EBS Storage Only, Low to Moderate Network Performance
      KeyName: pihole-key
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          Description: 'PiHole EC2 Network Interface 0'
          DeviceIndex: 0
          GroupSet:
            - Fn::ImportValue: !Join [ '-', [ 'pihole-security-stack', Ref: AWS::Region, 'EC2-SecurityGroup-PiHoleEC2SecurityGroup-Id' ] ]
            - Fn::ImportValue: !Join [ '-', [ 'edward-home-ec2-security-group-stack', Ref: AWS::Region, 'EC2-SecurityGroup-EdwardHomeSecurityGroup-GroupId' ] ]
          Ipv6Addresses:
            - Ipv6Address:
                Fn::Sub:
                  - '${NetworkPart}${HostPart}'
                  - NetworkPart:
                      Fn::Select:
                        - '0'
                        - Fn::Split:
                            - '/64'
                            - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-Ipv6CidrBlock' ] ]
                    HostPart: !Ref Ipv6HostNumber
          PrivateIpAddress:
            Fn::Sub:
              - '${NetworkPart}${HostPart}'
              - NetworkPart:
                  Fn::Select:
                    - '0'
                    - Fn::Split:
                        - '0/24'
                        - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-CidrBlock' ] ]
                HostPart: !Ref Ipv4HostNumber
          SubnetId:
            Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-SubnetId'
      PrivateDnsNameOptions:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: true
        HostnameType: 'resource-name'
      PropagateTagsToVolumeOnCreation: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install environment toolings
          sudo apt-get update
          sudo apt-get install unzip
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py
          export PATH="/home/ubuntu/.local/bin:$PATH"
          echo 'export PATH=/home/ubuntu/.local/bin:$PATH' >>~/.profile
          wget https://bootstrap.pypa.io/ez_setup.py -O â€“ | sudo python3
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          # Install AWS Cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          # Install EC2 Instance Connect
          sudo apt-get install ec2-instance-connect
          # Install AmazonCloudWatchAgent and restart it
          wget https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
          sudo /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource PiHoleEC2Instance --region ${AWS::Region} --configsets default
          sudo /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PiHoleEC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'PiHole-EC2-Instance' ]]

  # EC2 EIP Association
  PiHoleEC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::ImportValue: !Join [ '-', [ 'ec2-eip-stack', Ref: AWS::Region, 'EC2-EIP-ElasticIP1-AllocationId' ]]
      InstanceId: !Ref PiHoleEC2Instance

  # IAM Instance Profile
  PiHoleIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: PiHoleIAMInstanceProfile
      Roles:
        - Fn::ImportValue: !Sub 'pihole-security-stack-${AWS::Region}-IAM-Role-PiHoleIAMRole-Ref'

  # Logs LogGroup
  PiHoleSyslogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${EC2ServiceName}-syslog-log-group'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: PiHoleSyslogLogGroup

  PiHoleCfnInitLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${EC2ServiceName}-cfn-init-log-group'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: PiHoleCfnInitLogGroup

  PiHoleCfnInitCmdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${EC2ServiceName}-cfn-init-cmd-log-group'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: PiHoleCfnInitLogGroup

  PiHoleCfnWireLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${EC2ServiceName}-cfn-wire-log-group'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: PiHoleCfnWireLogGroup

Outputs:
  PiHoleEC2InstanceRef:
    Value: !Ref PiHoleEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-Ref'
  PiHoleEC2InstanceAvailabilityZone:
    Value: !GetAtt PiHoleEC2Instance.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-AvailabilityZone'
  PiHoleEC2InstancePrivateDnsName:
    Value: !GetAtt PiHoleEC2Instance.PrivateDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateDnsName'
  PiHoleEC2InstancePrivateIp:
    Value: !GetAtt PiHoleEC2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateIp'
  PiHoleEC2InstancePublicDnsName:
    Value: !GetAtt PiHoleEC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicDnsName'
  PiHoleEC2InstancePublicIp:
    Value: !GetAtt PiHoleEC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicIp'
  PiHoleEC2EIPAssociationRef:
    Value: !Ref PiHoleEC2EIPAssociation
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-EIPAssociation-PiHoleEC2EIPAssociation-Ref'
  PiHoleEC2EIPAssociationId:
    Value: !GetAtt PiHoleEC2EIPAssociation.Id
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-EIPAssociation-PiHoleEC2EIPAssociation-Id'

