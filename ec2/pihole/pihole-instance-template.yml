AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a PiHole EC2 Security Resources in AWS

Resources:
  # EC2 Instance
  PiHoleEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.PiHoleEC2Instance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -s '
                  - !Ref 'AWS::StackId'
                  - ' -r PiHoleEC2Instance '
                  - ' --region     '
                  - !Ref 'AWS::Region'
                  - |+
                  - |
                    runas=root
    Properties:
      AvailabilityZone:
        Fn::ImportValue: !Join [ '-', [ 'vpc-stack', Ref: AWS::Region, 'PublicSubnet1', 'AvailabilityZone' ]]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 16
            VolumeType: gp3
      IamInstanceProfile: !Ref PiHoleIAMInstanceProfile
      ImageId: ami-0f2967bce46537146 # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      InstanceType: t2.micro #1 vCPU, 1G Mem, EBS Storage Only, Low to Moderate Network Performance
      KeyName: pihole-key
      Monitoring: true
      PrivateDnsNameOptions:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: true
        HostnameType: 'resource-name'
      PropagateTagsToVolumeOnCreation: true
      SubnetId:
        Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-SubnetId'
      Volumes:
        - Device: /dev/xvda
          VolumeId:
            Fn::ImportValue: !Sub 'pihole-data-stack-${AWS::Region}-EC2-Volume-PiHoleEBSStorage-VolumeId'
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash -xe
            - |
              # Get the latest CloudFormation package
            - |
              sudo apt-get -y install python-setuptools
            - |
              mkdir aws-cfn-bootstrap-latest
            - |
              curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
            - |
              sudo easy_install aws-cfn-bootstrap-latest
            - |
              ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            - |
              # Start cfn-init
            - '/usr/local/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r PiHoleEC2Instance '
            - ' --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init'
            - >
              # Start up the cfn-hup daemon to listen for changes to the EC2
              instance metadata
            - |
              /usr/local/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            - |
              # Get the CloudWatch Logs agent
            - >
              wget
              https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            - |
              # Install the CloudWatch Logs agent
            - 'python awslogs-agent-setup.py -n -r '
            - !Ref 'AWS::Region'
            - |2
               -c /tmp/cwlogs/apacheaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'
            - |
              # All done so signal success
            - '/usr/local/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource PiHoleEC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      Tags:
        - Key: Name
          Value: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'PiHole-EC2-Instance' ]]

  # EC2 NetworkInterfaceAttachment
  PiHoleEC2NetworkInterfaceAttachment:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
      DeleteOnTermination: false
      DeviceIndex: 0
      InstanceId: !Ref PiHoleEC2Instance
      NetworkInterfaceId: !Sub 'pihole-network-stack-${AWS::Region}-EC2-NetworkInterface-PiHoleNetworkInterface0-Id'

  # IAM Instance Profile
  PiHoleIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: PiHoleIAMInstanceProfile
      Roles:
        - Fn::ImportValue: !Sub 'pihole-security-stack-${AWS::Region}-IAM-Role-PiHoleIAMRole-Ref'
        - Fn::ImportValue: !Sub 'iam-role-stack-${AWS::Region}-IAM-Role-LogRole-Ref'

  # Fetch EC2 Ipv6 CloudFormation Custom Resource
  Ipv6Resource:
    DependsOn:
      - PiHoleEC2Instance
      - PiHoleEC2NetworkInterfaceAttachment
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::ImportValue: !Join [ '-', [ 'fetch-ec2-ipv6-lambda-stack', Ref: AWS::Region, 'FetchEC2Ipv6FunctionArn' ]]
      ResourceRef: !Ref PiHoleEC2Instance

Outputs:
  PiHoleEC2InstanceRef:
    Value: !Ref PiHoleEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-Ref'
  PiHoleEC2InstanceAvailabilityZone:
    Value: !GetAtt PiHoleEC2Instance.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-AvailabilityZone'
  PiHoleEC2InstancePrivateDnsName:
    Value: !GetAtt PiHoleEC2Instance.PrivateDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateDnsName'
  PiHoleEC2InstancePrivateIp:
    Value: !GetAtt PiHoleEC2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateIp'
  PiHoleEC2InstancePublicDnsName:
    Value: !GetAtt PiHoleEC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicDnsName'
  PiHoleEC2InstancePublicIp:
    Value: !GetAtt PiHoleEC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicIp'
  PiHoleEC2NetworkInterfaceAttachmentRef:
    Value: !Ref PiHoleEC2NetworkInterfaceAttachment
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-NetworkInterfaceAttachment-PiHoleEC2NetworkInterfaceAttachment-Ref'
  PiHoleEC2NetworkInterfaceAttachmentId:
    Value: !GetAtt PiHoleEC2NetworkInterfaceAttachment.AttachmentId
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-NetworkInterfaceAttachment-PiHoleEC2NetworkInterfaceAttachment-AttachmentId'
  Ipv6ResourceIpv6Address:
    Value: !GetAtt Ipv6Resource.Ipv6Address
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-CloudFormation-CustomResource-Ipv6Resource-Ipv6Address'

