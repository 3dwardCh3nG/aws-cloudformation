AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a PiHole EC2 Security Resources in AWS

Parameters:
  InstanceNumber:
    Description: The sequencial number of the instance
    Type: String
    Default: 1
  EC2ServiceName:
    Description: The name of the EC2 service
    Type: String
    Default: pihole
  Ipv4HostNumber:
    Description: The host value of the public IPv4 address for the new instance
    Type: String
    Default: 100
  Ipv6HostNumber:
    Description: The host value of the public IPv6 address for the new instance
    Type: String
    Default: 10
  PiHoleAdminPwdHash:
    Description: The password double hash to access the PiHole Admin Console
    Type: String

Resources:
  # EC2 Instance
  PiHoleEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_setupPiHoleInstallationConfig
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 5,
                    "region": "${AWS::Region}",
                    "credentials": {
                      "role_arn": "arn:aws:iam::359331717478:role/PiHoleIAMRole"
                    },
                    "debug": true,
                    "aws_sdk_log_level": "LogDebug",
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"},
                          "cpu_usage_guest"
                        ],
                        "totalcpu": false,
                        "drop_original_metrics": [ "cpu_usage_guest" ],
                        "metrics_collection_interval": 5
                      },
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "resources": [
                          "*"
                        ],
                        "drop_device": true,
                        "metrics_collection_interval": 5
                      },
                      "diskio": {
                        "measurement": [
                          "reads", "writes", "read_bytes", "write_bytes", "read_time", "write_time", "io_time", "iops_in_progress"
                        ],
                        "metrics_collection_interval": 5
                      },
                      "mem": {
                        "measurement": [
                          "active", "available", "available_percent", "buffered", "cached", "free", "inactive", "total", "used", "used_percent"
                        ],
                        "metrics_collection_interval": 5
                      },
                      "swap": {
                        "measurement": [
                          "free", "used", "used_percent"
                        ],
                        "metrics_collection_interval": 5
                      }
                    },
                    "force_flush_interval": 5,
                    "credentials": {
                      "role_arn": "arn:aws:iam::359331717478:role/PiHoleIAMRole"
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/syslog",
                            "log_group_name": "pihole-syslog-log-group",
                            "log_stream_name": "${EC2ServiceName}-syslog-log-stream",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S.%f",
                            "timezone": "Local"
                          },
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "pihole-cfn-init-log-group",
                            "log_stream_name": "pihole-cfn-init-log-stream",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S.%f",
                            "timezone": "Local"
                          },
                          {
                            "file_path": "/var/log/cfn-init-cmd.log",
                            "log_group_name": "pihole-cfn-init-cmd-log-group",
                            "log_stream_name": "pihole-cfn-init-cmd-log-stream",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S.%f",
                            "timezone": "Local"
                          },
                          {
                            "file_path": "/var/log/cfn-wire.log",
                            "log_group_name": "pihole-cfn-wire-log-group",
                            "log_stream_name": "pihole-cfn-wire-log-stream",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S.%f",
                            "timezone": "Local"
                          }
                        ]
                      }
                    },
                    "log_stream_name": "pihole-log-stream",
                    "force_flush_interval": 5,
                    "credentials": {
                      "role_arn": "arn:aws:iam::359331717478:role/PiHoleIAMRole"
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PiHoleEC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource PiHoleEC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
        # PiHole Configuration for the unattended installation
        04_setupPiHoleInstallationConfig:
          files:
            '/etc/pihole/setupVars.conf':
              content: !Sub |
                WEBPASSWORD=${PiHoleAdminPwdHash}
                PIHOLE_INTERFACE=eth0
                IPV4_ADDRESS=10.1.1.${Ipv4HostNumber}
                IPV6_ADDRESS=2406:da1c:1c:2f01::${Ipv6HostNumber}
                QUERY_LOGGING=true
                INSTALL_WEB=true
                DNSMASQ_LISTENING=single
                PIHOLE_DNS_1=8.8.8.8
                PIHOLE_DNS_2=8.8.4.4
                PIHOLE_DNS_3=2001:4860:4860:0:0:0:0:8888
                PIHOLE_DNS_4=2001:4860:4860:0:0:0:0:8844
                DNS_FQDN_REQUIRED=true
                DNS_BOGUS_PRIV=true
                DNSSEC=true
                TEMPERATUREUNIT=C
                WEBUIBOXEDLAYOUT=traditional
                API_EXCLUDE_DOMAINS=
                API_EXCLUDE_CLIENTS=
                API_QUERY_LOG_SHOW=all
                API_PRIVACY_MODE=false
    Properties:
      AvailabilityZone:
        Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-AvailabilityZone'
      IamInstanceProfile:
        Fn::ImportValue: !Sub 'pihole-security-stack-${AWS::Region}-IAM-InstanceProfile-PiHoleIAMInstanceProfile-Ref'
      ImageId: ami-0f2967bce46537146 # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
      InstanceType: t2.micro #1 vCPU, 1G Mem, EBS Storage Only, Low to Moderate Network Performance
      KeyName: pihole-key
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: 'PiHole EC2 Network Interface 0'
          DeviceIndex: 0
          GroupSet:
            - Fn::ImportValue: !Join [ '-', [ 'pihole-security-stack', Ref: AWS::Region, 'EC2-SecurityGroup-PiHoleEC2SecurityGroup-Id' ] ]
            - Fn::ImportValue: !Join [ '-', [ 'edward-home-ec2-security-group-stack', Ref: AWS::Region, 'EC2-SecurityGroup-EdwardHomeSecurityGroup-GroupId' ] ]
          Ipv6Addresses:
            - Ipv6Address:
                Fn::Sub:
                  - '${NetworkPart}${HostPart}'
                  - NetworkPart:
                      Fn::Select:
                        - '0'
                        - Fn::Split:
                            - '/64'
                            - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-Ipv6CidrBlock' ] ]
                    HostPart: !Ref Ipv6HostNumber
          PrivateIpAddress:
            Fn::Sub:
              - '${NetworkPart}${HostPart}'
              - NetworkPart:
                  Fn::Select:
                    - '0'
                    - Fn::Split:
                        - '0/24'
                        - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-CidrBlock' ] ]
                HostPart: !Ref Ipv4HostNumber
          SubnetId:
            Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-SubnetId'
      PrivateDnsNameOptions:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: true
        HostnameType: 'resource-name'
      PropagateTagsToVolumeOnCreation: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install environment toolings
          sudo apt upgrade -y
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install unzip
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py
          export PATH="/home/ubuntu/.local/bin:$PATH"
          echo 'export PATH=/home/ubuntu/.local/bin:$PATH' >>~/.profile
          wget https://bootstrap.pypa.io/ez_setup.py -O – | sudo python3
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          # Install AWS Cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          # Install EC2 Instance Connect
          sudo apt-get install ec2-instance-connect
          # Install AmazonCloudWatchAgent and restart it
          wget https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
          sudo /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource PiHoleEC2Instance --region ${AWS::Region} --configsets default
          sudo /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PiHoleEC2Instance --region ${AWS::Region}
          # Install PiHole
          sudo apt install lighttpd
          sudo su
          curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-${AWS::Region}-PiHole-EC2-Instance-${InstanceNumber}'

Outputs:
  PiHoleEC2InstanceRef:
    Value: !Ref PiHoleEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-Ref'
  PiHoleEC2InstanceAvailabilityZone:
    Value: !GetAtt PiHoleEC2Instance.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-AvailabilityZone'
  PiHoleEC2InstancePrivateDnsName:
    Value: !GetAtt PiHoleEC2Instance.PrivateDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateDnsName'
  PiHoleEC2InstancePrivateIp:
    Value: !GetAtt PiHoleEC2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PrivateIp'
  PiHoleEC2InstancePublicDnsName:
    Value: !GetAtt PiHoleEC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicDnsName'
  PiHoleEC2InstancePublicIp:
    Value: !GetAtt PiHoleEC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-EC2-Instance-PiHoleEC2Instance-PublicIp'

