AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a Nat Instance EC2 Resources in AWS

Parameters:
  AMIId:
    Description: The AMI ID for the Nat Instance
    Type: String
    Default: ami-09b42976632b27e9b

Resources:
  NatInstanceTopic:
    Type: AWS::SNS::Topic
    Properties: { }
  NatInstanceTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: Id1
        Version: 2012-10-17
        Statement:
          - Sid: Sid1
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - budgets.amazonaws.com
            Action: sns:Publish
            Resource: !Ref NatInstanceTopic
          - Sid: Sid2
            Effect: Allow
            Principal:
              AWS: '*'
            Action: sns:Publish
            Resource: !Ref NatInstanceTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref NatInstanceTopic
  NatInstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  NatInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Nat Instance Security Group
      GroupName: NatInstanceSecurityGroup
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-CidrBlock' ] ]
          Description: Allow inbound ipv4 traffic from Private Subnet 1
          IpProtocol: -1
        - CidrIpv6:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-Ipv6CidrBlock' ] ]
          Description: Allow inbound ipv6 traffic from Private Subnet 1
          IpProtocol: -1
        - CidrIp: 0.0.0.0/0
          Description: Allow inbound ipv4 traffic from Internet for SSH on port 22
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIpv6: ::0/0
          Description: Allow inbound ipv6 traffic from Internet for SSH on port 22
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: Allow inbound ipv4 traffic from Internet for HTTP TCP on port 80
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIpv6: ::0/0
          Description: Allow inbound ipv6 traffic from Internet for HTTP TCP on port 80
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow inbound ipv4 traffic from Internet for HTTPS TCP on port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIpv6: ::0/0
          Description: Allow inbound ipv6 traffic from Internet for HTTPS TCP on port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow inbound ipv4 traffic for pihole-FTL DNS TCP on port 53
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIpv6: ::0/0
          Description: Allow inbound ipv6 traffic for pihole-FTL DNS TCP on port 53
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIp: 0.0.0.0/0
          Description: Allow inbound ipv4 traffic for pihole-FTL DNS UDP on port 53
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
        - CidrIpv6: ::0/0
          Description: Allow inbound ipv6 traffic for pihole-FTL UDP TCP on port 53
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
      SecurityGroupEgress:
        - CidrIp:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-CidrBlock' ] ]
          Description: Allow inbound ipv4 traffic for HTTP to Private Subnet 1
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIpv6:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-Ipv6CidrBlock' ] ]
          Description: Allow inbound ipv6 traffic for HTTP to Private Subnet 1
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-CidrBlock' ] ]
          Description: Allow inbound ipv4 traffic for HTTPS to Private Subnet 1
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIpv6:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-Ipv6CidrBlock' ] ]
          Description: Allow inbound ipv6 traffic for HTTPS to Private Subnet 1
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-CidrBlock' ] ]
          Description: Allow inbound ipv4 traffic for pihole-FTL DNS TCP on port 53
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIpv6:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-Ipv6CidrBlock' ] ]
          Description: Allow inbound ipv6 traffic for pihole-FTL DNS TCP on port 53
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIp:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-CidrBlock' ] ]
          Description: Allow inbound ipv4 traffic for pihole-FTL DNS UDP on port 53
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
        - CidrIpv6:
            Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPrivateSubnet1-Ipv6CidrBlock' ] ]
          Description: Allow inbound ipv6 traffic for pihole-FTL DNS UDP on port 53
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
        - CidrIp: 0.0.0.0/0
          Description: Allow all ipv4 outbound traffic to Internet
          IpProtocol: -1
        - CidrIpv6: ::/0
          Description: Allow all ipv6 outbound traffic to Internet
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'NatInstanceSecurityGroup' ] ]
      VpcId:
        Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpc-VpcId' ] ]
  NatInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !GetAtt NatInstanceLogGroup.Arn
        - PolicyName: s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListObjects
                  - s3:ListObjectsV2
                Resource:
                  - arn:aws:s3:::*
  NatInstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: NatInstanceIAMInstanceProfile
      Roles:
        - !Ref NatInstanceIAMRole
  NatInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:  [awslogs, ssh-access, config]
        awslogs:
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/lib/awslogs/agent-state"
                          },
                          {
                            "file_path": "/var/log/messages",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/messages",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/secure",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/secure",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cron",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cron",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cloud-init.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cfn-init.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-hup.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-hup.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-init-cmd.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/cloud-init-output.log",
                            "timestamp_format": "%b %d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/dmesg",
                            "log_group_name": "${NatInstanceLogGroup}",
                            "log_stream_name": "{instance_id}/var/log/dmesg",
                            "timestamp_format": "%b %d %H:%M:%S"
                          }
                        ]
                      }
                    }
                  }
                }
        ssh-access:
          services:
            sysvinit:
              sshd:
                enabled: true
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NatInstanceLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=NatInstanceLaunchTemplate
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              Encrypted: true
              VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref NatInstanceInstanceProfile
        ImageId: !Ref AMIId
        InstanceType: t2.micro
        KeyName: nat-instance-key-pair
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref NatInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            # Install environment toolings
            echo "Install environment toolings"
            sudo yum update -y && sudo yum upgrade -y
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py
            # trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup' ERR
            # Run cfn-init
            sudo /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource NatInstanceLaunchTemplate --region ${AWS::Region}
            # Install Cloudwatch Agent
            echo "Install Cloudwatch Agent"
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            # Initialise iptables and ip6tables
            sudo mkdir /etc/iptables
            sudo aws s3 cp s3://cloudformation-templates-shared-files/iptables /etc/iptables --recursive
            sudo yum install iptables -y && sudo yum install ip6tables -y
            sudo bash ./etc/iptables/iptables-init.sh
            sudo bash ./etc/iptables/ip6tables-init.sh
            /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup
  NatInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref NatInstanceLaunchTemplate
        Version: !GetAtt NatInstanceLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: 'NAT instance Auto Scaling Group'
          PropagateAtLaunch: true
      NotificationConfigurations:
        - NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: !GetAtt NatInstanceTopic.TopicArn
      VPCZoneIdentifier:
        - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-SubnetId' ] ]
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions: !GetAtt NatInstanceTopic.TopicArn
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref NatInstanceAutoScalingGroup

Outputs:
  NatInstanceTopicRef:
    Value: !Ref NatInstanceTopic
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-Ref' ] ]
  NatInstanceTopicTopicArn:
    Value: !GetAtt NatInstanceTopic.TopicArn
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-TopicArn' ] ]
  NatInstanceTopicTopicName:
    Value: !GetAtt NatInstanceTopic.TopicName
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-TopicName' ] ]
  NatInstanceTopicPolicyId:
    Value: !GetAtt NatInstanceTopicPolicy.Id
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'SNS-TopicPolicy-NatInstanceTopicPolicy-Id' ] ]
  NatInstanceLogGroupRef:
    Value: !Ref NatInstanceLogGroup
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'Logs-LogGroup-NatInstanceLogGroup-Ref' ] ]
  NatInstanceLogGroupArn:
    Value: !GetAtt NatInstanceLogGroup.Arn
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'Logs-LogGroup-NatInstanceLogGroup-Arn' ] ]
  NatInstanceSecurityGroupRef:
    Value: !Ref NatInstanceSecurityGroup
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-SecurityGroup-NatInstanceSecurityGroup-Ref' ] ]
  NatInstanceSecurityGroupGroupId:
    Value: !GetAtt NatInstanceSecurityGroup.GroupId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-SecurityGroup-NatInstanceSecurityGroup-GroupId' ] ]
  NatInstanceSecurityGroupVpcId:
    Value: !GetAtt NatInstanceSecurityGroup.VpcId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-SecurityGroup-NatInstanceSecurityGroup-VpcId' ] ]
  NatInstanceIAMRoleRef:
    Value: !Ref NatInstanceIAMRole
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'IAM-Role-NatInstanceIAMRole-Ref' ] ]
  NatInstanceIAMRoleArn:
    Value: !GetAtt NatInstanceIAMRole.Arn
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'IAM-Role-NatInstanceIAMRole-Arn' ] ]
  NatInstanceIAMRoleRoleId:
    Value: !GetAtt NatInstanceIAMRole.RoleId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'IAM-Role-NatInstanceIAMRole-RoleId' ] ]
  NatInstanceInstanceProfileRef:
    Value: !Ref NatInstanceInstanceProfile
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'IAM-InstanceProfile-NatInstanceInstanceProfile-Ref' ] ]
  NatInstanceInstanceProfileArn:
    Value: !GetAtt NatInstanceInstanceProfile.Arn
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'IAM-InstanceProfile-NatInstanceInstanceProfile-Arn' ] ]
  NatInstanceLaunchTemplateRef:
    Value: !Ref NatInstanceLaunchTemplate
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-Ref' ] ]
  NatInstanceLaunchTemplateDefaultVersionNumber:
    Value: !GetAtt NatInstanceLaunchTemplate.DefaultVersionNumber
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-DefaultVersionNumber' ] ]
  NatInstanceLaunchTemplateLatestVersionNumber:
    Value: !GetAtt NatInstanceLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-LatestVersionNumber' ] ]
  NatInstanceLaunchTemplateLaunchTemplateId:
    Value: !GetAtt NatInstanceLaunchTemplate.LaunchTemplateId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-LaunchTemplateId' ] ]
  NatInstanceAutoScalingGroupRef:
    Value: !Ref NatInstanceAutoScalingGroup
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'AutoScaling-AutoScalingGroup-NatInstanceAutoScalingGroup-Ref' ] ]