AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a Nat Instance EC2 Resources in AWS

Parameters:
  AMIId:
    Description: The AMI ID for the Nat Instance
    Type: String
    Default: ami-09b42976632b27e9b

Resources:
  NatInstanceLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:  [awslogs, ssh-access, config]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${NatInstanceLogGroup}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${NatInstanceLogGroup}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - '/etc/awslogs/awslogs.conf'
                  - '/etc/awslogs/awscli.conf'
        ssh-access:
          services:
            sysvinit:
              sshd:
                enabled: true
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NatInstanceLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=NatInstanceLaunchTemplate
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - '/etc/cfn/cfn-hup.conf'
                  - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              Encrypted: true
              VolumeType: gp3
        IamInstanceProfile:
          Name:
            Fn::ImportedValue: !Join [ '-', [ 'nat-instance-security-stack', Ref: AWS::Region, 'IAM-InstanceProfile-NatInstanceInstanceProfile-Ref' ] ]
        ImageId: !Ref AMIId
        InstanceType: t2.micro
        KeyName: nat-instance-key-pair
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - ImportValue: !Join [ '-', [ 'nat-instance-security-stack', Ref: AWS::Region, 'EC2-SecurityGroup-NatInstanceSecurityGroup-Ref' ] ]
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash -ex
            # Install environment toolings
            echo "Install environment toolings"
            sudo yum update && sudo yum upgrade -y
            export PATH="/home/ec2-user/.local/bin:$PATH"
            echo 'export PATH=/home/ec2-user/.local/bin:$PATH' >>~/.profile
            wget https://bootstrap.pypa.io/ez_setup.py -O â€“ | sudo python3
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            # Install AWS Cli
            echo "Install AWS Cli"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
            unzip awscliv2.zip
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            # Install EC2 Instance Connect
            echo "Install EC2 Instance Connect"
            sudo yum install ec2-instance-connect
            # Install AmazonCloudWatchAgent and restart it
            echo "Install AmazonCloudWatchAgent and restart it"
            curl -L -o amazon-cloudwatch-agent.rpm https://amazoncloudwatch-agent.s3.amazonaws.com/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            sudo rpm -U ./amazon-cloudwatch-agent.rpm
            trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup' ERR
            # Run cfn-init
            sudo /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource NatInstanceLaunchTemplate --region ${AWS::Region}
            sudo aws s3 cp s3://cloudformation-templates-shared-files/iptables/*.* /etc/iptables
            # Initialise iptables and ip6tables
            sudo bash ./etc/iptables/iptables-init.sh
            sudo bash ./etc/iptables/ip6tables-init.sh
            /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup
  NatInstanceAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref NatInstanceLaunchTemplate
        Version: !GetAtt NatInstanceLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: 'NAT instance Auto Scaling Group'
          PropagateAtLaunch: true
      NotificationConfigurations:
        - NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN:
            Fn::ImportValue: !Join [ '-', [ 'nat-instance-logs-stack', Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-TopicArn' ] ]
      VPCZoneIdentifier:
        - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-SubnetId' ] ]
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions: !GetAtt NatInstanceTopic.TopicArn
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref NatInstanceAutoScalingGroup

Outputs:
  NatInstanceLaunchTemplateRef:
    Value: !Ref NatInstanceLaunchTemplate
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-Ref' ] ]
  NatInstanceLaunchTemplateDefaultVersionNumber:
    Value: !GetAtt NatInstanceLaunchTemplate.DefaultVersionNumber
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-DefaultVersionNumber' ] ]
  NatInstanceLaunchTemplateLatestVersionNumber:
    Value: !GetAtt NatInstanceLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-LatestVersionNumber' ] ]
  NatInstanceLaunchTemplateLaunchTemplateId:
    Value: !GetAtt NatInstanceLaunchTemplate.LaunchTemplateId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-LaunchTemplate-NatInstanceLaunchTemplate-LaunchTemplateId' ] ]
  NatInstanceAutoScalingGroupRef:
    Value: !Ref NatInstanceAutoScalingGroup
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'AutoScaling-AutoScalingGroup-NatInstanceAutoScalingGroup-Ref' ] ]