AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a Nat Instance EC2 Resources in AWS

Parameters:
  AMIId:
    Description: The AMI ID for the Nat Instance
    Type: String
    Default: ami-09b42976632b27e9b

Resources:
  NatInstanceNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: NatInstanceNetworkInterface
      GroupSet:
        - Fn::ImportValue: !Join [ '-', [ 'nat-instance-common-stack', Ref: AWS::Region, 'EC2-SecurityGroup-NatInstanceSecurityGroup-Ref' ] ]
      Ipv4PrefixCount: 1
      Ipv6AddressCount: 1
      SourceDestCheck: false
      SubnetId:
        Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-SubnetId' ] ]
      Tags:
        - Key: Name
          Value: 'NAT instance Network Interface'
  NatInstanceNetworkInterfaceAttachment:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
      DeleteOnTermination: true
      DeviceIndex: 0
      InstanceId: !Ref NatInstanceEC2Instance
      NetworkInterfaceId: !Ref NatInstanceNetworkInterface
  NatInstanceEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::ImportValue: !Join [ '-', [ 'ec2-eip-stack', Ref: AWS::Region, 'EC2-EIP-NatInstanceElasticIP-AllocationId' ] ]
      InstanceId: !Ref NatInstanceEC2Instance
  NatInstanceEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [ awslogs, ssh-access, config ]
        awslogs:
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub
                - |
                  {
                    "logs": {
                      "logs_collected": {
                        "files": {
                          "collect_list": [
                            {
                              "file_path": "/var/lib/awslogs/agent-state"
                            },
                            {
                              "file_path": "/var/log/messages",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/messages",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/secure",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/secure",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cron",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cron",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cloud-init.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cloud-init.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cfn-init.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cfn-init.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cfn-hup.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cfn-hup.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cfn-hup.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cfn-hup.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cfn-init-cmd.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cfn-init-cmd.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/cloud-init-output.log",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/cloud-init-output.log",
                              "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                              "file_path": "/var/log/dmesg",
                              "log_group_name": "${NatInstanceLogGroup}",
                              "log_stream_name": "{instance_id}/var/log/dmesg",
                              "timestamp_format": "%b %d %H:%M:%S"
                            }
                          ]
                        }
                      }
                    }
                  }
                - NatInstanceLogGroup:
                    Fn::ImportValue: !Join [ '-', [ 'nat-instance-common-stack', Ref: AWS::Region, 'Logs-LogGroup-NatInstanceLogGroup-Ref' ] ]
        ssh-access:
          services:
            sysvinit:
              sshd:
                enabled: true
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NatInstanceLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=NatInstanceLaunchTemplate
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AvailabilityZone:
        Fn::ImportValue: !Sub 'general-vpc-stack-${AWS::Region}-EC2-VPC-GeneralVpcPublicSubnet1-AvailabilityZone'
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: true
            VolumeType: gp3
      IamInstanceProfile:
        Fn::ImportValue: !Join [ '-', [ 'nat-instance-common-stack', Ref: AWS::Region, 'IAM-InstanceProfile-NatInstanceInstanceProfile-Ref' ] ]
      ImageId: !Ref AMIId
      InstanceType: t2.micro #1 vCPU, 1G Mem, EBS Storage Only, Low to Moderate Network Performance
      KeyName: nat-instance-key-pair
      PrivateDnsNameOptions:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: true
        HostnameType: 'resource-name'
      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: Name
          Value: 'NAT instance EC2 Instance'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          # Install environment toolings
          echo "Install environment toolings"
          sudo yum update -y && sudo yum upgrade -y
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py
          # trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup' ERR
          # Run cfn-init
          sudo /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource NatInstanceLaunchTemplate --region ${AWS::Region}
          # Install Cloudwatch Agent
          # echo "Install Cloudwatch Agent"
          # rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          # Install fak-nat
          # echo "Install fak-nat"
          # curl -L https://github.com/AndrewGuenther/fck-nat/releases/download/v1.2.1/fck-nat-1.2.1-any.rpm -O
          # sudo rpm -i fck-nat-1.2.1-any.rpm
          # Initialise iptables and ip6tables
          # Turning on IP Forwarding
          # yum install iptables-services -y
          # sudo systemctl enable iptables
          # sudo systemctl start iptables
          # echo "net.ipv4.ip_forward = 1" | sudo tee -a /etc/sysctl.conf
          # echo "net.ipv6.conf.all.forwarding = 1" | sudo tee -a /etc/sysctl.conf
          # sudo sysctl -p
          # sudo mkdir /etc/iptables
          # sudo aws s3 cp --recursive s3://cloudformation-templates-shared-files/iptables /etc/iptables
          # sudo bash /etc/iptables/firewall-init.sh
          /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackId} --resource NatInstanceAutoScalingGroup

  NatInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      InstanceId: !Ref NatInstanceEC2Instance
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: 'NAT instance Auto Scaling Group'
          PropagateAtLaunch: true
      NotificationConfigurations:
        - NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN:
            Fn::ImportValue: !Join [ '-', [ 'nat-instance-common-stack', Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-TopicArn' ] ]
      VPCZoneIdentifier:
        - Fn::ImportValue: !Join [ '-', [ 'general-vpc-stack', Ref: AWS::Region, 'EC2-VPC-GeneralVpcPublicSubnet1-SubnetId' ] ]
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
        - Fn::ImportValue: !Join [ '-', [ 'nat-instance-common-stack', Ref: AWS::Region, 'SNS-Topic-NatInstanceTopic-TopicArn' ] ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref NatInstanceAutoScalingGroup

Outputs:
  NatInstanceNetworkInterfaceRef:
    Value: !Ref NatInstanceNetworkInterface
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-NetworkInterface-NatInstanceNetworkInterface-Ref' ] ]
  NatInstanceNetworkInterfaceId:
    Value: !Ref NatInstanceNetworkInterface
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-NetworkInterface-NatInstanceNetworkInterface-Id' ] ]
  NatInstanceNetworkInterfacePrivateIp:
    Value: !GetAtt NatInstanceNetworkInterface.PrimaryPrivateIpAddress
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-NetworkInterface-NatInstanceNetworkInterface-PrivateIp' ] ]
  NatInstanceNetworkInterfaceAttachmentRef:
    Value: !Ref NatInstanceNetworkInterfaceAttachment
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-NetworkInterfaceAttachment-NatInstanceNetworkInterfaceAttachment-Ref' ] ]
  NatInstanceNetworkInterfaceAttachmentAttachmentId:
    Value: !GetAtt NatInstanceNetworkInterfaceAttachment.AttachmentId
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-NetworkInterfaceAttachment-NatInstanceNetworkInterfaceAttachment-AttachmentId' ] ]
  NatInstanceEIPAssociationRef:
    Value: !Ref NatInstanceEIPAssociation
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-EIPAssociation-NatInstanceEIPAssociation-Ref' ] ]
  NatInstanceEIPAssociationId:
    Value: !GetAtt NatInstanceEIPAssociation.Id
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-EIPAssociation-NatInstanceEIPAssociation-Id' ] ]
  NatInstanceEC2InstanceRef:
    Value: !Ref NatInstanceEC2Instance
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-Ref' ] ]
  NatInstanceEC2InstanceAvailabilityZone:
    Value: !GetAtt NatInstanceEC2Instance.AvailabilityZone
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-AvailabilityZone' ] ]
  NatInstanceEC2InstancePrivateDnsName:
    Value: !GetAtt NatInstanceEC2Instance.PrivateDnsName
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-PrivateDnsName' ] ]
  NatInstanceEC2InstancePrivateIp:
    Value: !GetAtt NatInstanceEC2Instance.PrivateIpAddress
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-PrivateIp' ] ]
  NatInstanceEC2InstancePublicDnsName:
    Value: !GetAtt NatInstanceEC2Instance.PublicDnsName
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-PublicDnsName' ] ]
  NatInstanceEC2InstancePublicIp:
    Value: !GetAtt NatInstanceEC2Instance.PublicIp
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'EC2-Instance-NatInstanceEC2Instance-PublicIp' ] ]
  NatInstanceAutoScalingGroupRef:
    Value: !Ref NatInstanceAutoScalingGroup
    Export:
      Name: !Join [ '-', [ Ref: AWS::StackName, Ref: AWS::Region, 'AutoScaling-AutoScalingGroup-NatInstanceAutoScalingGroup-Ref' ] ]